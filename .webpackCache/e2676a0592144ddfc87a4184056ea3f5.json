{"remainingRequest":"/Users/alexbrown/Development/fandanzle-v2/node_modules/babel-loader/lib/index.js!/Users/alexbrown/Development/fandanzle-v2/src/web/containers/header/header.state.tsx","dependencies":[{"path":"/Users/alexbrown/Development/fandanzle-v2/src/web/containers/header/header.state.tsx","mtime":1576613374481},{"path":"/Users/alexbrown/Development/fandanzle-v2/.babelrc","mtime":1575409032754},{"path":"/Users/alexbrown/Development/fandanzle-v2/node_modules/cache-loader/dist/cjs.js","mtime":1583684819619},{"path":"/Users/alexbrown/Development/fandanzle-v2/node_modules/babel-loader/lib/index.js","mtime":1575412165599}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgZmV0Y2hSZXF1ZXN0IH0gZnJvbSAnLi4vLi4vLi4vY29yZS9hY3Rpb25zJzsKaW1wb3J0IHsgZ2V0TWV0YWRhdGEgfSBmcm9tICcuLi8uLi8uLi9jb3JlL21ldGFkYXRhL3NlbGVjdG9ycyc7CmV4cG9ydCB2YXIgbWFwU3RhdGVUb1Byb3BzID0gZnVuY3Rpb24gbWFwU3RhdGVUb1Byb3BzKHN0YXRlKSB7CiAgcmV0dXJuIHsKICAgIG1ldGFkYXRhOiBnZXRNZXRhZGF0YShzdGF0ZSkKICB9Owp9OwpleHBvcnQgdmFyIG1hcERpc3BhdGNoVG9Qcm9wcyA9IGZ1bmN0aW9uIG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCkgewogIHJldHVybiB7CiAgICBvbkZldGNoQWN0aW9uOiBmdW5jdGlvbiBvbkZldGNoQWN0aW9uKCkgewogICAgICByZXR1cm4gZGlzcGF0Y2goZmV0Y2hSZXF1ZXN0KCkpOwogICAgfQogIH07Cn07"},{"version":3,"sources":["/Users/alexbrown/Development/fandanzle-v2/src/web/containers/header/header.state.tsx"],"names":["fetchRequest","getMetadata","mapStateToProps","state","metadata","mapDispatchToProps","dispatch","onFetchAction"],"mappings":"AAAA,SAASA,YAAT,QAA6B,uBAA7B;AAMA,SAASC,WAAT,QAA4B,kCAA5B;AAYA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD;AAAA,SAA8B;AACzDC,IAAAA,QAAQ,EAAEH,WAAW,CAACE,KAAD;AADoC,GAA9B;AAAA,CAAxB;AAIP,OAAO,IAAME,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD;AAAA,SAAkC;AAChEC,IAAAA,aAAa,EAAE;AAAA,aAAMD,QAAQ,CAACN,YAAY,EAAb,CAAd;AAAA;AADiD,GAAlC;AAAA,CAA3B","sourcesContent":["import { fetchRequest } from '../../../core/actions'\n\nimport { ICommonFields } from '../../../models/common'\nimport { IBlogPostPayload } from '../../../models/blog'\nimport { getBlogItems } from '../../../core/blog/selectors';\nimport { IMetadataPayload } from '../../../models/metadata';\nimport { getMetadata } from '../../../core/metadata/selectors';\n\nexport type IStateProps = {\n    metadata: IMetadataPayload;\n}\n\nexport type IActionProps = {\n    onFetchAction(): void,\n}\n\nexport type IHeaderProps = IStateProps & IActionProps;\n\nexport const mapStateToProps = (state: any): IStateProps => ({\n    metadata: getMetadata(state)\n});\n\nexport const mapDispatchToProps = (dispatch: any): IActionProps => ({\n    onFetchAction: () => dispatch(fetchRequest()),\n});\n"]}]}