{"remainingRequest":"/Users/alexbrown/Development/fandanzle-v2/node_modules/babel-loader/lib/index.js!/Users/alexbrown/Development/fandanzle-v2/src/core/metadata/sagas.ts","dependencies":[{"path":"/Users/alexbrown/Development/fandanzle-v2/src/core/metadata/sagas.ts","mtime":1576192411607},{"path":"/Users/alexbrown/Development/fandanzle-v2/.babelrc","mtime":1575409032754},{"path":"/Users/alexbrown/Development/fandanzle-v2/node_modules/cache-loader/dist/cjs.js","mtime":1583684819619},{"path":"/Users/alexbrown/Development/fandanzle-v2/node_modules/babel-loader/lib/index.js","mtime":1575412165599}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9yZWdlbmVyYXRvclJ1bnRpbWUgZnJvbSAiL1VzZXJzL2FsZXhicm93bi9EZXZlbG9wbWVudC9mYW5kYW56bGUtdjIvbm9kZV9tb2R1bGVzL2JhYmVsLXByZXNldC1yZWFjdC1hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yIjsKCnZhciBfbWFya2VkID0KLyojX19QVVJFX18qLwpfcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsobWV0YWRhdGFTYWdhcyk7CgppbXBvcnQgeyBwYXRoIH0gZnJvbSAncmFtZGEnOwppbXBvcnQgeyBjYWxsLCBwdXQgfSBmcm9tICdyZWR1eC1zYWdhL2VmZmVjdHMnOwppbXBvcnQgeyBNZXRhZGF0YUFjdGlvblR5cGVzIH0gZnJvbSAnLi9hY3Rpb25zJzsKaW1wb3J0IHsgQXNzZXRBY3Rpb25UeXBlcyB9IGZyb20gJy4uL2Fzc2V0cy9hY3Rpb25zJzsKaW1wb3J0IHsgZmV0Y2hNZXRhZGF0YSB9IGZyb20gJy4vZmV0Y2gnOwppbXBvcnQgeyBtZXRhZGF0YUlkIH0gZnJvbSAnLi4vY29uc3RhbnRzJzsKZXhwb3J0IGZ1bmN0aW9uIG1ldGFkYXRhU2FnYXMoKSB7CiAgdmFyIHBheWxvYWQ7CiAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBtZXRhZGF0YVNhZ2FzJChfY29udGV4dCkgewogICAgd2hpbGUgKDEpIHsKICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgIGNhc2UgMDoKICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAwOwogICAgICAgICAgX2NvbnRleHQubmV4dCA9IDM7CiAgICAgICAgICByZXR1cm4gY2FsbChmZXRjaE1ldGFkYXRhLCBtZXRhZGF0YUlkKTsKCiAgICAgICAgY2FzZSAzOgogICAgICAgICAgcGF5bG9hZCA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNjsKICAgICAgICAgIHJldHVybiBwdXQoewogICAgICAgICAgICB0eXBlOiBBc3NldEFjdGlvblR5cGVzLkZFVENIX1NUQVJULAogICAgICAgICAgICBwYXlsb2FkOiBwYXRoKFsnZGF0YScsICdmaWVsZHMnLCAncHJpbWFyeUltYWdlJywgJ3N5cycsICdpZCddLCBwYXlsb2FkKQogICAgICAgICAgfSk7CgogICAgICAgIGNhc2UgNjoKICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA4OwogICAgICAgICAgcmV0dXJuIHB1dCh7CiAgICAgICAgICAgIHR5cGU6IE1ldGFkYXRhQWN0aW9uVHlwZXMuRkVUQ0hfU1VDQ0VTUywKICAgICAgICAgICAgcGF5bG9hZDogcGF5bG9hZC5kYXRhLmZpZWxkcwogICAgICAgICAgfSk7CgogICAgICAgIGNhc2UgODoKICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxNDsKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlIDEwOgogICAgICAgICAgX2NvbnRleHQucHJldiA9IDEwOwogICAgICAgICAgX2NvbnRleHQudDAgPSBfY29udGV4dFsiY2F0Y2giXSgwKTsKICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxNDsKICAgICAgICAgIHJldHVybiBwdXQoewogICAgICAgICAgICB0eXBlOiBNZXRhZGF0YUFjdGlvblR5cGVzLkZFVENIX0VSUk9SLAogICAgICAgICAgICBleDogX2NvbnRleHQudDAKICAgICAgICAgIH0pOwoKICAgICAgICBjYXNlIDE0OgogICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICB9CiAgICB9CiAgfSwgX21hcmtlZCwgdGhpcywgW1swLCAxMF1dKTsKfQ=="},{"version":3,"sources":["/Users/alexbrown/Development/fandanzle-v2/src/core/metadata/sagas.ts"],"names":["metadataSagas","path","call","put","MetadataActionTypes","AssetActionTypes","fetchMetadata","metadataId","payload","type","FETCH_START","FETCH_SUCCESS","data","fields","FETCH_ERROR","ex"],"mappings":";;;;yBAQiBA,a;;AARjB,SAASC,IAAT,QAAqB,OAArB;AACA,SAASC,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AAEA,SAASC,mBAAT,QAAoC,WAApC;AACA,SAASC,gBAAT,QAAiC,mBAAjC;AACA,SAASC,aAAT,QAA8B,SAA9B;AACA,SAASC,UAAT,QAA2B,cAA3B;AAEA,OAAO,SAAUP,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEa,iBAAME,IAAI,CAACI,aAAD,EAAgBC,UAAhB,CAAV;;AAFb;AAEGC,UAAAA,OAFH;AAAA;AAGH,iBAAML,GAAG,CAAC;AACRM,YAAAA,IAAI,EAAEJ,gBAAgB,CAACK,WADf;AAERF,YAAAA,OAAO,EAAEP,IAAI,CAAM,CAAC,MAAD,EAAS,QAAT,EAAmB,cAAnB,EAAmC,KAAnC,EAA0C,IAA1C,CAAN,EAAuDO,OAAvD;AAFL,WAAD,CAAT;;AAHG;AAAA;AAQH,iBAAML,GAAG,CAAC;AACRM,YAAAA,IAAI,EAAEL,mBAAmB,CAACO,aADlB;AAERH,YAAAA,OAAO,EAAEA,OAAO,CAACI,IAAR,CAAaC;AAFd,WAAD,CAAT;;AARG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAaH,iBAAMV,GAAG,CAAC;AACRM,YAAAA,IAAI,EAAEL,mBAAmB,CAACU,WADlB;AAERC,YAAAA,EAAE;AAFM,WAAD,CAAT;;AAbG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { path } from 'ramda';\nimport { call, put } from 'redux-saga/effects';\n\nimport { MetadataActionTypes } from './actions'\nimport { AssetActionTypes } from '../assets/actions';\nimport { fetchMetadata } from './fetch';\nimport { metadataId } from '../constants';\n\nexport function* metadataSagas() {\n  try {\n    const payload = yield call(fetchMetadata, metadataId);    \n    yield put({\n      type: AssetActionTypes.FETCH_START,\n      payload: path<any>(['data', 'fields', 'primaryImage', 'sys', 'id'], payload)\n    });\n    \n    yield put({\n      type: MetadataActionTypes.FETCH_SUCCESS,\n      payload: payload.data.fields\n    });\n  } catch(ex) {\n    yield put({\n      type: MetadataActionTypes.FETCH_ERROR,\n      ex\n    });\n  }\n}"]}]}